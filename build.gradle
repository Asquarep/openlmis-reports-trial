buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE"
    }
}

plugins {
    id "org.flywaydb.flyway" version "4.0"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'checkstyle'
apply plugin: "jacoco"

jar {
    baseName = 'openlmis-template-service'
    version  = '0.0.1'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-rest"
    compile "org.projectlombok:lombok:1.16.8"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.postgresql:postgresql:9.4.1208"
    compile "com.github.tomakehurst:wiremock:1.58"

    testCompile "junit:junit"
}

flyway {
    url = "jdbc:postgresql://openlmis-db:5432/open_lmis"
    user = "postgres"
    password = "p@ssw0rd"
    schemas = ['public']
    sqlMigrationPrefix = ''
    placeholderPrefix = '#['
    placeholderSuffix = ']'
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }

        resources {
            srcDirs = ["src/main/resources"]
        }
    }

    test {
        java {
            srcDirs = ["src/test/java"]
        }

        resources {
            srcDirs = ["src/test/resources"]
        }

    }
}

// Usage: gradle generateMigration [-PmigrationName=name_of_migration]
//          Defaults to 'migration' as migration name
// Example: gradle generateMigration -PmigrationName=add_column_to_users
//          Will create a file in migration folder with name yyyyMMddHHmmssSSS_add_column_to_users.sql.
task generateMigration << {
    description 'Creates an empty new file within the src/main/resources/db/migration directory into which developers can add new SQL migration code.'
    def fileName = project.hasProperty('migrationName') ? migrationName : 'migration'
    def timestamp = new Date().format('yyyyMMddHHmmssSSS', TimeZone.getTimeZone('GMT'))
    def fullFileName = "${timestamp}__${fileName}.sql"
    def migrationFile = new File(sourceSets.main.resources.srcDirs.first(),'db/migration/'+fullFileName)
    migrationFile.createNewFile()
}

test {
    testLogging {
        events 'started', 'passed'
    }
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }

    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

checkstyle {
    toolVersion = "6.19"
}

build.dependsOn jacocoTestReport
// Makes sure checkstyle is run before build completes
build.dependsOn check
